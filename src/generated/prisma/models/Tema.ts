
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Tema` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Tema
 * 
 */
export type TemaModel = runtime.Types.Result.DefaultSelection<Prisma.$TemaPayload>

export type AggregateTema = {
  _count: TemaCountAggregateOutputType | null
  _avg: TemaAvgAggregateOutputType | null
  _sum: TemaSumAggregateOutputType | null
  _min: TemaMinAggregateOutputType | null
  _max: TemaMaxAggregateOutputType | null
}

export type TemaAvgAggregateOutputType = {
  id: number | null
  id_creador: number | null
  id_carrera: number | null
}

export type TemaSumAggregateOutputType = {
  id: number | null
  id_creador: number | null
  id_carrera: number | null
}

export type TemaMinAggregateOutputType = {
  id: number | null
  nombre: string | null
  createdAt: Date | null
  updatedAt: Date | null
  titulo: string | null
  id_creador: number | null
  contenido: string | null
  id_carrera: number | null
  fijado: boolean | null
  cerrado: boolean | null
}

export type TemaMaxAggregateOutputType = {
  id: number | null
  nombre: string | null
  createdAt: Date | null
  updatedAt: Date | null
  titulo: string | null
  id_creador: number | null
  contenido: string | null
  id_carrera: number | null
  fijado: boolean | null
  cerrado: boolean | null
}

export type TemaCountAggregateOutputType = {
  id: number
  nombre: number
  createdAt: number
  updatedAt: number
  titulo: number
  id_creador: number
  contenido: number
  id_carrera: number
  fijado: number
  cerrado: number
  _all: number
}


export type TemaAvgAggregateInputType = {
  id?: true
  id_creador?: true
  id_carrera?: true
}

export type TemaSumAggregateInputType = {
  id?: true
  id_creador?: true
  id_carrera?: true
}

export type TemaMinAggregateInputType = {
  id?: true
  nombre?: true
  createdAt?: true
  updatedAt?: true
  titulo?: true
  id_creador?: true
  contenido?: true
  id_carrera?: true
  fijado?: true
  cerrado?: true
}

export type TemaMaxAggregateInputType = {
  id?: true
  nombre?: true
  createdAt?: true
  updatedAt?: true
  titulo?: true
  id_creador?: true
  contenido?: true
  id_carrera?: true
  fijado?: true
  cerrado?: true
}

export type TemaCountAggregateInputType = {
  id?: true
  nombre?: true
  createdAt?: true
  updatedAt?: true
  titulo?: true
  id_creador?: true
  contenido?: true
  id_carrera?: true
  fijado?: true
  cerrado?: true
  _all?: true
}

export type TemaAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Tema to aggregate.
   */
  where?: Prisma.TemaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Temas to fetch.
   */
  orderBy?: Prisma.TemaOrderByWithRelationInput | Prisma.TemaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TemaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Temas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Temas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Temas
  **/
  _count?: true | TemaCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: TemaAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: TemaSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TemaMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TemaMaxAggregateInputType
}

export type GetTemaAggregateType<T extends TemaAggregateArgs> = {
      [P in keyof T & keyof AggregateTema]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTema[P]>
    : Prisma.GetScalarType<T[P], AggregateTema[P]>
}




export type TemaGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TemaWhereInput
  orderBy?: Prisma.TemaOrderByWithAggregationInput | Prisma.TemaOrderByWithAggregationInput[]
  by: Prisma.TemaScalarFieldEnum[] | Prisma.TemaScalarFieldEnum
  having?: Prisma.TemaScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TemaCountAggregateInputType | true
  _avg?: TemaAvgAggregateInputType
  _sum?: TemaSumAggregateInputType
  _min?: TemaMinAggregateInputType
  _max?: TemaMaxAggregateInputType
}

export type TemaGroupByOutputType = {
  id: number
  nombre: string
  createdAt: Date
  updatedAt: Date
  titulo: string
  id_creador: number
  contenido: string
  id_carrera: number
  fijado: boolean
  cerrado: boolean
  _count: TemaCountAggregateOutputType | null
  _avg: TemaAvgAggregateOutputType | null
  _sum: TemaSumAggregateOutputType | null
  _min: TemaMinAggregateOutputType | null
  _max: TemaMaxAggregateOutputType | null
}

type GetTemaGroupByPayload<T extends TemaGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TemaGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TemaGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TemaGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TemaGroupByOutputType[P]>
      }
    >
  > 



export type TemaWhereInput = {
  AND?: Prisma.TemaWhereInput | Prisma.TemaWhereInput[]
  OR?: Prisma.TemaWhereInput[]
  NOT?: Prisma.TemaWhereInput | Prisma.TemaWhereInput[]
  id?: Prisma.IntFilter<"Tema"> | number
  nombre?: Prisma.StringFilter<"Tema"> | string
  createdAt?: Prisma.DateTimeFilter<"Tema"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Tema"> | Date | string
  titulo?: Prisma.StringFilter<"Tema"> | string
  id_creador?: Prisma.IntFilter<"Tema"> | number
  contenido?: Prisma.StringFilter<"Tema"> | string
  id_carrera?: Prisma.IntFilter<"Tema"> | number
  fijado?: Prisma.BoolFilter<"Tema"> | boolean
  cerrado?: Prisma.BoolFilter<"Tema"> | boolean
  creador?: Prisma.XOR<Prisma.UsuarioScalarRelationFilter, Prisma.UsuarioWhereInput>
  carrera?: Prisma.XOR<Prisma.CarreraScalarRelationFilter, Prisma.CarreraWhereInput>
  Post?: Prisma.PostListRelationFilter
}

export type TemaOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  titulo?: Prisma.SortOrder
  id_creador?: Prisma.SortOrder
  contenido?: Prisma.SortOrder
  id_carrera?: Prisma.SortOrder
  fijado?: Prisma.SortOrder
  cerrado?: Prisma.SortOrder
  creador?: Prisma.UsuarioOrderByWithRelationInput
  carrera?: Prisma.CarreraOrderByWithRelationInput
  Post?: Prisma.PostOrderByRelationAggregateInput
  _relevance?: Prisma.TemaOrderByRelevanceInput
}

export type TemaWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.TemaWhereInput | Prisma.TemaWhereInput[]
  OR?: Prisma.TemaWhereInput[]
  NOT?: Prisma.TemaWhereInput | Prisma.TemaWhereInput[]
  nombre?: Prisma.StringFilter<"Tema"> | string
  createdAt?: Prisma.DateTimeFilter<"Tema"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Tema"> | Date | string
  titulo?: Prisma.StringFilter<"Tema"> | string
  id_creador?: Prisma.IntFilter<"Tema"> | number
  contenido?: Prisma.StringFilter<"Tema"> | string
  id_carrera?: Prisma.IntFilter<"Tema"> | number
  fijado?: Prisma.BoolFilter<"Tema"> | boolean
  cerrado?: Prisma.BoolFilter<"Tema"> | boolean
  creador?: Prisma.XOR<Prisma.UsuarioScalarRelationFilter, Prisma.UsuarioWhereInput>
  carrera?: Prisma.XOR<Prisma.CarreraScalarRelationFilter, Prisma.CarreraWhereInput>
  Post?: Prisma.PostListRelationFilter
}, "id">

export type TemaOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  titulo?: Prisma.SortOrder
  id_creador?: Prisma.SortOrder
  contenido?: Prisma.SortOrder
  id_carrera?: Prisma.SortOrder
  fijado?: Prisma.SortOrder
  cerrado?: Prisma.SortOrder
  _count?: Prisma.TemaCountOrderByAggregateInput
  _avg?: Prisma.TemaAvgOrderByAggregateInput
  _max?: Prisma.TemaMaxOrderByAggregateInput
  _min?: Prisma.TemaMinOrderByAggregateInput
  _sum?: Prisma.TemaSumOrderByAggregateInput
}

export type TemaScalarWhereWithAggregatesInput = {
  AND?: Prisma.TemaScalarWhereWithAggregatesInput | Prisma.TemaScalarWhereWithAggregatesInput[]
  OR?: Prisma.TemaScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TemaScalarWhereWithAggregatesInput | Prisma.TemaScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Tema"> | number
  nombre?: Prisma.StringWithAggregatesFilter<"Tema"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Tema"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Tema"> | Date | string
  titulo?: Prisma.StringWithAggregatesFilter<"Tema"> | string
  id_creador?: Prisma.IntWithAggregatesFilter<"Tema"> | number
  contenido?: Prisma.StringWithAggregatesFilter<"Tema"> | string
  id_carrera?: Prisma.IntWithAggregatesFilter<"Tema"> | number
  fijado?: Prisma.BoolWithAggregatesFilter<"Tema"> | boolean
  cerrado?: Prisma.BoolWithAggregatesFilter<"Tema"> | boolean
}

export type TemaCreateInput = {
  nombre: string
  createdAt?: Date | string
  updatedAt?: Date | string
  titulo: string
  contenido: string
  fijado?: boolean
  cerrado?: boolean
  creador: Prisma.UsuarioCreateNestedOneWithoutTemaInput
  carrera: Prisma.CarreraCreateNestedOneWithoutTemaInput
  Post?: Prisma.PostCreateNestedManyWithoutTemaInput
}

export type TemaUncheckedCreateInput = {
  id?: number
  nombre: string
  createdAt?: Date | string
  updatedAt?: Date | string
  titulo: string
  id_creador: number
  contenido: string
  id_carrera: number
  fijado?: boolean
  cerrado?: boolean
  Post?: Prisma.PostUncheckedCreateNestedManyWithoutTemaInput
}

export type TemaUpdateInput = {
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  titulo?: Prisma.StringFieldUpdateOperationsInput | string
  contenido?: Prisma.StringFieldUpdateOperationsInput | string
  fijado?: Prisma.BoolFieldUpdateOperationsInput | boolean
  cerrado?: Prisma.BoolFieldUpdateOperationsInput | boolean
  creador?: Prisma.UsuarioUpdateOneRequiredWithoutTemaNestedInput
  carrera?: Prisma.CarreraUpdateOneRequiredWithoutTemaNestedInput
  Post?: Prisma.PostUpdateManyWithoutTemaNestedInput
}

export type TemaUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  titulo?: Prisma.StringFieldUpdateOperationsInput | string
  id_creador?: Prisma.IntFieldUpdateOperationsInput | number
  contenido?: Prisma.StringFieldUpdateOperationsInput | string
  id_carrera?: Prisma.IntFieldUpdateOperationsInput | number
  fijado?: Prisma.BoolFieldUpdateOperationsInput | boolean
  cerrado?: Prisma.BoolFieldUpdateOperationsInput | boolean
  Post?: Prisma.PostUncheckedUpdateManyWithoutTemaNestedInput
}

export type TemaCreateManyInput = {
  id?: number
  nombre: string
  createdAt?: Date | string
  updatedAt?: Date | string
  titulo: string
  id_creador: number
  contenido: string
  id_carrera: number
  fijado?: boolean
  cerrado?: boolean
}

export type TemaUpdateManyMutationInput = {
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  titulo?: Prisma.StringFieldUpdateOperationsInput | string
  contenido?: Prisma.StringFieldUpdateOperationsInput | string
  fijado?: Prisma.BoolFieldUpdateOperationsInput | boolean
  cerrado?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type TemaUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  titulo?: Prisma.StringFieldUpdateOperationsInput | string
  id_creador?: Prisma.IntFieldUpdateOperationsInput | number
  contenido?: Prisma.StringFieldUpdateOperationsInput | string
  id_carrera?: Prisma.IntFieldUpdateOperationsInput | number
  fijado?: Prisma.BoolFieldUpdateOperationsInput | boolean
  cerrado?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type TemaListRelationFilter = {
  every?: Prisma.TemaWhereInput
  some?: Prisma.TemaWhereInput
  none?: Prisma.TemaWhereInput
}

export type TemaOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TemaOrderByRelevanceInput = {
  fields: Prisma.TemaOrderByRelevanceFieldEnum | Prisma.TemaOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type TemaCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  titulo?: Prisma.SortOrder
  id_creador?: Prisma.SortOrder
  contenido?: Prisma.SortOrder
  id_carrera?: Prisma.SortOrder
  fijado?: Prisma.SortOrder
  cerrado?: Prisma.SortOrder
}

export type TemaAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  id_creador?: Prisma.SortOrder
  id_carrera?: Prisma.SortOrder
}

export type TemaMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  titulo?: Prisma.SortOrder
  id_creador?: Prisma.SortOrder
  contenido?: Prisma.SortOrder
  id_carrera?: Prisma.SortOrder
  fijado?: Prisma.SortOrder
  cerrado?: Prisma.SortOrder
}

export type TemaMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  titulo?: Prisma.SortOrder
  id_creador?: Prisma.SortOrder
  contenido?: Prisma.SortOrder
  id_carrera?: Prisma.SortOrder
  fijado?: Prisma.SortOrder
  cerrado?: Prisma.SortOrder
}

export type TemaSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  id_creador?: Prisma.SortOrder
  id_carrera?: Prisma.SortOrder
}

export type TemaScalarRelationFilter = {
  is?: Prisma.TemaWhereInput
  isNot?: Prisma.TemaWhereInput
}

export type TemaCreateNestedManyWithoutCreadorInput = {
  create?: Prisma.XOR<Prisma.TemaCreateWithoutCreadorInput, Prisma.TemaUncheckedCreateWithoutCreadorInput> | Prisma.TemaCreateWithoutCreadorInput[] | Prisma.TemaUncheckedCreateWithoutCreadorInput[]
  connectOrCreate?: Prisma.TemaCreateOrConnectWithoutCreadorInput | Prisma.TemaCreateOrConnectWithoutCreadorInput[]
  createMany?: Prisma.TemaCreateManyCreadorInputEnvelope
  connect?: Prisma.TemaWhereUniqueInput | Prisma.TemaWhereUniqueInput[]
}

export type TemaUncheckedCreateNestedManyWithoutCreadorInput = {
  create?: Prisma.XOR<Prisma.TemaCreateWithoutCreadorInput, Prisma.TemaUncheckedCreateWithoutCreadorInput> | Prisma.TemaCreateWithoutCreadorInput[] | Prisma.TemaUncheckedCreateWithoutCreadorInput[]
  connectOrCreate?: Prisma.TemaCreateOrConnectWithoutCreadorInput | Prisma.TemaCreateOrConnectWithoutCreadorInput[]
  createMany?: Prisma.TemaCreateManyCreadorInputEnvelope
  connect?: Prisma.TemaWhereUniqueInput | Prisma.TemaWhereUniqueInput[]
}

export type TemaUpdateManyWithoutCreadorNestedInput = {
  create?: Prisma.XOR<Prisma.TemaCreateWithoutCreadorInput, Prisma.TemaUncheckedCreateWithoutCreadorInput> | Prisma.TemaCreateWithoutCreadorInput[] | Prisma.TemaUncheckedCreateWithoutCreadorInput[]
  connectOrCreate?: Prisma.TemaCreateOrConnectWithoutCreadorInput | Prisma.TemaCreateOrConnectWithoutCreadorInput[]
  upsert?: Prisma.TemaUpsertWithWhereUniqueWithoutCreadorInput | Prisma.TemaUpsertWithWhereUniqueWithoutCreadorInput[]
  createMany?: Prisma.TemaCreateManyCreadorInputEnvelope
  set?: Prisma.TemaWhereUniqueInput | Prisma.TemaWhereUniqueInput[]
  disconnect?: Prisma.TemaWhereUniqueInput | Prisma.TemaWhereUniqueInput[]
  delete?: Prisma.TemaWhereUniqueInput | Prisma.TemaWhereUniqueInput[]
  connect?: Prisma.TemaWhereUniqueInput | Prisma.TemaWhereUniqueInput[]
  update?: Prisma.TemaUpdateWithWhereUniqueWithoutCreadorInput | Prisma.TemaUpdateWithWhereUniqueWithoutCreadorInput[]
  updateMany?: Prisma.TemaUpdateManyWithWhereWithoutCreadorInput | Prisma.TemaUpdateManyWithWhereWithoutCreadorInput[]
  deleteMany?: Prisma.TemaScalarWhereInput | Prisma.TemaScalarWhereInput[]
}

export type TemaUncheckedUpdateManyWithoutCreadorNestedInput = {
  create?: Prisma.XOR<Prisma.TemaCreateWithoutCreadorInput, Prisma.TemaUncheckedCreateWithoutCreadorInput> | Prisma.TemaCreateWithoutCreadorInput[] | Prisma.TemaUncheckedCreateWithoutCreadorInput[]
  connectOrCreate?: Prisma.TemaCreateOrConnectWithoutCreadorInput | Prisma.TemaCreateOrConnectWithoutCreadorInput[]
  upsert?: Prisma.TemaUpsertWithWhereUniqueWithoutCreadorInput | Prisma.TemaUpsertWithWhereUniqueWithoutCreadorInput[]
  createMany?: Prisma.TemaCreateManyCreadorInputEnvelope
  set?: Prisma.TemaWhereUniqueInput | Prisma.TemaWhereUniqueInput[]
  disconnect?: Prisma.TemaWhereUniqueInput | Prisma.TemaWhereUniqueInput[]
  delete?: Prisma.TemaWhereUniqueInput | Prisma.TemaWhereUniqueInput[]
  connect?: Prisma.TemaWhereUniqueInput | Prisma.TemaWhereUniqueInput[]
  update?: Prisma.TemaUpdateWithWhereUniqueWithoutCreadorInput | Prisma.TemaUpdateWithWhereUniqueWithoutCreadorInput[]
  updateMany?: Prisma.TemaUpdateManyWithWhereWithoutCreadorInput | Prisma.TemaUpdateManyWithWhereWithoutCreadorInput[]
  deleteMany?: Prisma.TemaScalarWhereInput | Prisma.TemaScalarWhereInput[]
}

export type TemaCreateNestedManyWithoutCarreraInput = {
  create?: Prisma.XOR<Prisma.TemaCreateWithoutCarreraInput, Prisma.TemaUncheckedCreateWithoutCarreraInput> | Prisma.TemaCreateWithoutCarreraInput[] | Prisma.TemaUncheckedCreateWithoutCarreraInput[]
  connectOrCreate?: Prisma.TemaCreateOrConnectWithoutCarreraInput | Prisma.TemaCreateOrConnectWithoutCarreraInput[]
  createMany?: Prisma.TemaCreateManyCarreraInputEnvelope
  connect?: Prisma.TemaWhereUniqueInput | Prisma.TemaWhereUniqueInput[]
}

export type TemaUncheckedCreateNestedManyWithoutCarreraInput = {
  create?: Prisma.XOR<Prisma.TemaCreateWithoutCarreraInput, Prisma.TemaUncheckedCreateWithoutCarreraInput> | Prisma.TemaCreateWithoutCarreraInput[] | Prisma.TemaUncheckedCreateWithoutCarreraInput[]
  connectOrCreate?: Prisma.TemaCreateOrConnectWithoutCarreraInput | Prisma.TemaCreateOrConnectWithoutCarreraInput[]
  createMany?: Prisma.TemaCreateManyCarreraInputEnvelope
  connect?: Prisma.TemaWhereUniqueInput | Prisma.TemaWhereUniqueInput[]
}

export type TemaUpdateManyWithoutCarreraNestedInput = {
  create?: Prisma.XOR<Prisma.TemaCreateWithoutCarreraInput, Prisma.TemaUncheckedCreateWithoutCarreraInput> | Prisma.TemaCreateWithoutCarreraInput[] | Prisma.TemaUncheckedCreateWithoutCarreraInput[]
  connectOrCreate?: Prisma.TemaCreateOrConnectWithoutCarreraInput | Prisma.TemaCreateOrConnectWithoutCarreraInput[]
  upsert?: Prisma.TemaUpsertWithWhereUniqueWithoutCarreraInput | Prisma.TemaUpsertWithWhereUniqueWithoutCarreraInput[]
  createMany?: Prisma.TemaCreateManyCarreraInputEnvelope
  set?: Prisma.TemaWhereUniqueInput | Prisma.TemaWhereUniqueInput[]
  disconnect?: Prisma.TemaWhereUniqueInput | Prisma.TemaWhereUniqueInput[]
  delete?: Prisma.TemaWhereUniqueInput | Prisma.TemaWhereUniqueInput[]
  connect?: Prisma.TemaWhereUniqueInput | Prisma.TemaWhereUniqueInput[]
  update?: Prisma.TemaUpdateWithWhereUniqueWithoutCarreraInput | Prisma.TemaUpdateWithWhereUniqueWithoutCarreraInput[]
  updateMany?: Prisma.TemaUpdateManyWithWhereWithoutCarreraInput | Prisma.TemaUpdateManyWithWhereWithoutCarreraInput[]
  deleteMany?: Prisma.TemaScalarWhereInput | Prisma.TemaScalarWhereInput[]
}

export type TemaUncheckedUpdateManyWithoutCarreraNestedInput = {
  create?: Prisma.XOR<Prisma.TemaCreateWithoutCarreraInput, Prisma.TemaUncheckedCreateWithoutCarreraInput> | Prisma.TemaCreateWithoutCarreraInput[] | Prisma.TemaUncheckedCreateWithoutCarreraInput[]
  connectOrCreate?: Prisma.TemaCreateOrConnectWithoutCarreraInput | Prisma.TemaCreateOrConnectWithoutCarreraInput[]
  upsert?: Prisma.TemaUpsertWithWhereUniqueWithoutCarreraInput | Prisma.TemaUpsertWithWhereUniqueWithoutCarreraInput[]
  createMany?: Prisma.TemaCreateManyCarreraInputEnvelope
  set?: Prisma.TemaWhereUniqueInput | Prisma.TemaWhereUniqueInput[]
  disconnect?: Prisma.TemaWhereUniqueInput | Prisma.TemaWhereUniqueInput[]
  delete?: Prisma.TemaWhereUniqueInput | Prisma.TemaWhereUniqueInput[]
  connect?: Prisma.TemaWhereUniqueInput | Prisma.TemaWhereUniqueInput[]
  update?: Prisma.TemaUpdateWithWhereUniqueWithoutCarreraInput | Prisma.TemaUpdateWithWhereUniqueWithoutCarreraInput[]
  updateMany?: Prisma.TemaUpdateManyWithWhereWithoutCarreraInput | Prisma.TemaUpdateManyWithWhereWithoutCarreraInput[]
  deleteMany?: Prisma.TemaScalarWhereInput | Prisma.TemaScalarWhereInput[]
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type TemaCreateNestedOneWithoutPostInput = {
  create?: Prisma.XOR<Prisma.TemaCreateWithoutPostInput, Prisma.TemaUncheckedCreateWithoutPostInput>
  connectOrCreate?: Prisma.TemaCreateOrConnectWithoutPostInput
  connect?: Prisma.TemaWhereUniqueInput
}

export type TemaUpdateOneRequiredWithoutPostNestedInput = {
  create?: Prisma.XOR<Prisma.TemaCreateWithoutPostInput, Prisma.TemaUncheckedCreateWithoutPostInput>
  connectOrCreate?: Prisma.TemaCreateOrConnectWithoutPostInput
  upsert?: Prisma.TemaUpsertWithoutPostInput
  connect?: Prisma.TemaWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TemaUpdateToOneWithWhereWithoutPostInput, Prisma.TemaUpdateWithoutPostInput>, Prisma.TemaUncheckedUpdateWithoutPostInput>
}

export type TemaCreateWithoutCreadorInput = {
  nombre: string
  createdAt?: Date | string
  updatedAt?: Date | string
  titulo: string
  contenido: string
  fijado?: boolean
  cerrado?: boolean
  carrera: Prisma.CarreraCreateNestedOneWithoutTemaInput
  Post?: Prisma.PostCreateNestedManyWithoutTemaInput
}

export type TemaUncheckedCreateWithoutCreadorInput = {
  id?: number
  nombre: string
  createdAt?: Date | string
  updatedAt?: Date | string
  titulo: string
  contenido: string
  id_carrera: number
  fijado?: boolean
  cerrado?: boolean
  Post?: Prisma.PostUncheckedCreateNestedManyWithoutTemaInput
}

export type TemaCreateOrConnectWithoutCreadorInput = {
  where: Prisma.TemaWhereUniqueInput
  create: Prisma.XOR<Prisma.TemaCreateWithoutCreadorInput, Prisma.TemaUncheckedCreateWithoutCreadorInput>
}

export type TemaCreateManyCreadorInputEnvelope = {
  data: Prisma.TemaCreateManyCreadorInput | Prisma.TemaCreateManyCreadorInput[]
  skipDuplicates?: boolean
}

export type TemaUpsertWithWhereUniqueWithoutCreadorInput = {
  where: Prisma.TemaWhereUniqueInput
  update: Prisma.XOR<Prisma.TemaUpdateWithoutCreadorInput, Prisma.TemaUncheckedUpdateWithoutCreadorInput>
  create: Prisma.XOR<Prisma.TemaCreateWithoutCreadorInput, Prisma.TemaUncheckedCreateWithoutCreadorInput>
}

export type TemaUpdateWithWhereUniqueWithoutCreadorInput = {
  where: Prisma.TemaWhereUniqueInput
  data: Prisma.XOR<Prisma.TemaUpdateWithoutCreadorInput, Prisma.TemaUncheckedUpdateWithoutCreadorInput>
}

export type TemaUpdateManyWithWhereWithoutCreadorInput = {
  where: Prisma.TemaScalarWhereInput
  data: Prisma.XOR<Prisma.TemaUpdateManyMutationInput, Prisma.TemaUncheckedUpdateManyWithoutCreadorInput>
}

export type TemaScalarWhereInput = {
  AND?: Prisma.TemaScalarWhereInput | Prisma.TemaScalarWhereInput[]
  OR?: Prisma.TemaScalarWhereInput[]
  NOT?: Prisma.TemaScalarWhereInput | Prisma.TemaScalarWhereInput[]
  id?: Prisma.IntFilter<"Tema"> | number
  nombre?: Prisma.StringFilter<"Tema"> | string
  createdAt?: Prisma.DateTimeFilter<"Tema"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Tema"> | Date | string
  titulo?: Prisma.StringFilter<"Tema"> | string
  id_creador?: Prisma.IntFilter<"Tema"> | number
  contenido?: Prisma.StringFilter<"Tema"> | string
  id_carrera?: Prisma.IntFilter<"Tema"> | number
  fijado?: Prisma.BoolFilter<"Tema"> | boolean
  cerrado?: Prisma.BoolFilter<"Tema"> | boolean
}

export type TemaCreateWithoutCarreraInput = {
  nombre: string
  createdAt?: Date | string
  updatedAt?: Date | string
  titulo: string
  contenido: string
  fijado?: boolean
  cerrado?: boolean
  creador: Prisma.UsuarioCreateNestedOneWithoutTemaInput
  Post?: Prisma.PostCreateNestedManyWithoutTemaInput
}

export type TemaUncheckedCreateWithoutCarreraInput = {
  id?: number
  nombre: string
  createdAt?: Date | string
  updatedAt?: Date | string
  titulo: string
  id_creador: number
  contenido: string
  fijado?: boolean
  cerrado?: boolean
  Post?: Prisma.PostUncheckedCreateNestedManyWithoutTemaInput
}

export type TemaCreateOrConnectWithoutCarreraInput = {
  where: Prisma.TemaWhereUniqueInput
  create: Prisma.XOR<Prisma.TemaCreateWithoutCarreraInput, Prisma.TemaUncheckedCreateWithoutCarreraInput>
}

export type TemaCreateManyCarreraInputEnvelope = {
  data: Prisma.TemaCreateManyCarreraInput | Prisma.TemaCreateManyCarreraInput[]
  skipDuplicates?: boolean
}

export type TemaUpsertWithWhereUniqueWithoutCarreraInput = {
  where: Prisma.TemaWhereUniqueInput
  update: Prisma.XOR<Prisma.TemaUpdateWithoutCarreraInput, Prisma.TemaUncheckedUpdateWithoutCarreraInput>
  create: Prisma.XOR<Prisma.TemaCreateWithoutCarreraInput, Prisma.TemaUncheckedCreateWithoutCarreraInput>
}

export type TemaUpdateWithWhereUniqueWithoutCarreraInput = {
  where: Prisma.TemaWhereUniqueInput
  data: Prisma.XOR<Prisma.TemaUpdateWithoutCarreraInput, Prisma.TemaUncheckedUpdateWithoutCarreraInput>
}

export type TemaUpdateManyWithWhereWithoutCarreraInput = {
  where: Prisma.TemaScalarWhereInput
  data: Prisma.XOR<Prisma.TemaUpdateManyMutationInput, Prisma.TemaUncheckedUpdateManyWithoutCarreraInput>
}

export type TemaCreateWithoutPostInput = {
  nombre: string
  createdAt?: Date | string
  updatedAt?: Date | string
  titulo: string
  contenido: string
  fijado?: boolean
  cerrado?: boolean
  creador: Prisma.UsuarioCreateNestedOneWithoutTemaInput
  carrera: Prisma.CarreraCreateNestedOneWithoutTemaInput
}

export type TemaUncheckedCreateWithoutPostInput = {
  id?: number
  nombre: string
  createdAt?: Date | string
  updatedAt?: Date | string
  titulo: string
  id_creador: number
  contenido: string
  id_carrera: number
  fijado?: boolean
  cerrado?: boolean
}

export type TemaCreateOrConnectWithoutPostInput = {
  where: Prisma.TemaWhereUniqueInput
  create: Prisma.XOR<Prisma.TemaCreateWithoutPostInput, Prisma.TemaUncheckedCreateWithoutPostInput>
}

export type TemaUpsertWithoutPostInput = {
  update: Prisma.XOR<Prisma.TemaUpdateWithoutPostInput, Prisma.TemaUncheckedUpdateWithoutPostInput>
  create: Prisma.XOR<Prisma.TemaCreateWithoutPostInput, Prisma.TemaUncheckedCreateWithoutPostInput>
  where?: Prisma.TemaWhereInput
}

export type TemaUpdateToOneWithWhereWithoutPostInput = {
  where?: Prisma.TemaWhereInput
  data: Prisma.XOR<Prisma.TemaUpdateWithoutPostInput, Prisma.TemaUncheckedUpdateWithoutPostInput>
}

export type TemaUpdateWithoutPostInput = {
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  titulo?: Prisma.StringFieldUpdateOperationsInput | string
  contenido?: Prisma.StringFieldUpdateOperationsInput | string
  fijado?: Prisma.BoolFieldUpdateOperationsInput | boolean
  cerrado?: Prisma.BoolFieldUpdateOperationsInput | boolean
  creador?: Prisma.UsuarioUpdateOneRequiredWithoutTemaNestedInput
  carrera?: Prisma.CarreraUpdateOneRequiredWithoutTemaNestedInput
}

export type TemaUncheckedUpdateWithoutPostInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  titulo?: Prisma.StringFieldUpdateOperationsInput | string
  id_creador?: Prisma.IntFieldUpdateOperationsInput | number
  contenido?: Prisma.StringFieldUpdateOperationsInput | string
  id_carrera?: Prisma.IntFieldUpdateOperationsInput | number
  fijado?: Prisma.BoolFieldUpdateOperationsInput | boolean
  cerrado?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type TemaCreateManyCreadorInput = {
  id?: number
  nombre: string
  createdAt?: Date | string
  updatedAt?: Date | string
  titulo: string
  contenido: string
  id_carrera: number
  fijado?: boolean
  cerrado?: boolean
}

export type TemaUpdateWithoutCreadorInput = {
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  titulo?: Prisma.StringFieldUpdateOperationsInput | string
  contenido?: Prisma.StringFieldUpdateOperationsInput | string
  fijado?: Prisma.BoolFieldUpdateOperationsInput | boolean
  cerrado?: Prisma.BoolFieldUpdateOperationsInput | boolean
  carrera?: Prisma.CarreraUpdateOneRequiredWithoutTemaNestedInput
  Post?: Prisma.PostUpdateManyWithoutTemaNestedInput
}

export type TemaUncheckedUpdateWithoutCreadorInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  titulo?: Prisma.StringFieldUpdateOperationsInput | string
  contenido?: Prisma.StringFieldUpdateOperationsInput | string
  id_carrera?: Prisma.IntFieldUpdateOperationsInput | number
  fijado?: Prisma.BoolFieldUpdateOperationsInput | boolean
  cerrado?: Prisma.BoolFieldUpdateOperationsInput | boolean
  Post?: Prisma.PostUncheckedUpdateManyWithoutTemaNestedInput
}

export type TemaUncheckedUpdateManyWithoutCreadorInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  titulo?: Prisma.StringFieldUpdateOperationsInput | string
  contenido?: Prisma.StringFieldUpdateOperationsInput | string
  id_carrera?: Prisma.IntFieldUpdateOperationsInput | number
  fijado?: Prisma.BoolFieldUpdateOperationsInput | boolean
  cerrado?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type TemaCreateManyCarreraInput = {
  id?: number
  nombre: string
  createdAt?: Date | string
  updatedAt?: Date | string
  titulo: string
  id_creador: number
  contenido: string
  fijado?: boolean
  cerrado?: boolean
}

export type TemaUpdateWithoutCarreraInput = {
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  titulo?: Prisma.StringFieldUpdateOperationsInput | string
  contenido?: Prisma.StringFieldUpdateOperationsInput | string
  fijado?: Prisma.BoolFieldUpdateOperationsInput | boolean
  cerrado?: Prisma.BoolFieldUpdateOperationsInput | boolean
  creador?: Prisma.UsuarioUpdateOneRequiredWithoutTemaNestedInput
  Post?: Prisma.PostUpdateManyWithoutTemaNestedInput
}

export type TemaUncheckedUpdateWithoutCarreraInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  titulo?: Prisma.StringFieldUpdateOperationsInput | string
  id_creador?: Prisma.IntFieldUpdateOperationsInput | number
  contenido?: Prisma.StringFieldUpdateOperationsInput | string
  fijado?: Prisma.BoolFieldUpdateOperationsInput | boolean
  cerrado?: Prisma.BoolFieldUpdateOperationsInput | boolean
  Post?: Prisma.PostUncheckedUpdateManyWithoutTemaNestedInput
}

export type TemaUncheckedUpdateManyWithoutCarreraInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  titulo?: Prisma.StringFieldUpdateOperationsInput | string
  id_creador?: Prisma.IntFieldUpdateOperationsInput | number
  contenido?: Prisma.StringFieldUpdateOperationsInput | string
  fijado?: Prisma.BoolFieldUpdateOperationsInput | boolean
  cerrado?: Prisma.BoolFieldUpdateOperationsInput | boolean
}


/**
 * Count Type TemaCountOutputType
 */

export type TemaCountOutputType = {
  Post: number
}

export type TemaCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Post?: boolean | TemaCountOutputTypeCountPostArgs
}

/**
 * TemaCountOutputType without action
 */
export type TemaCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TemaCountOutputType
   */
  select?: Prisma.TemaCountOutputTypeSelect<ExtArgs> | null
}

/**
 * TemaCountOutputType without action
 */
export type TemaCountOutputTypeCountPostArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PostWhereInput
}


export type TemaSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  nombre?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  titulo?: boolean
  id_creador?: boolean
  contenido?: boolean
  id_carrera?: boolean
  fijado?: boolean
  cerrado?: boolean
  creador?: boolean | Prisma.UsuarioDefaultArgs<ExtArgs>
  carrera?: boolean | Prisma.CarreraDefaultArgs<ExtArgs>
  Post?: boolean | Prisma.Tema$PostArgs<ExtArgs>
  _count?: boolean | Prisma.TemaCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tema"]>



export type TemaSelectScalar = {
  id?: boolean
  nombre?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  titulo?: boolean
  id_creador?: boolean
  contenido?: boolean
  id_carrera?: boolean
  fijado?: boolean
  cerrado?: boolean
}

export type TemaOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "nombre" | "createdAt" | "updatedAt" | "titulo" | "id_creador" | "contenido" | "id_carrera" | "fijado" | "cerrado", ExtArgs["result"]["tema"]>
export type TemaInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  creador?: boolean | Prisma.UsuarioDefaultArgs<ExtArgs>
  carrera?: boolean | Prisma.CarreraDefaultArgs<ExtArgs>
  Post?: boolean | Prisma.Tema$PostArgs<ExtArgs>
  _count?: boolean | Prisma.TemaCountOutputTypeDefaultArgs<ExtArgs>
}

export type $TemaPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Tema"
  objects: {
    creador: Prisma.$UsuarioPayload<ExtArgs>
    carrera: Prisma.$CarreraPayload<ExtArgs>
    Post: Prisma.$PostPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    nombre: string
    createdAt: Date
    updatedAt: Date
    titulo: string
    id_creador: number
    contenido: string
    id_carrera: number
    fijado: boolean
    cerrado: boolean
  }, ExtArgs["result"]["tema"]>
  composites: {}
}

export type TemaGetPayload<S extends boolean | null | undefined | TemaDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TemaPayload, S>

export type TemaCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TemaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TemaCountAggregateInputType | true
  }

export interface TemaDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tema'], meta: { name: 'Tema' } }
  /**
   * Find zero or one Tema that matches the filter.
   * @param {TemaFindUniqueArgs} args - Arguments to find a Tema
   * @example
   * // Get one Tema
   * const tema = await prisma.tema.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TemaFindUniqueArgs>(args: Prisma.SelectSubset<T, TemaFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TemaClient<runtime.Types.Result.GetResult<Prisma.$TemaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Tema that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TemaFindUniqueOrThrowArgs} args - Arguments to find a Tema
   * @example
   * // Get one Tema
   * const tema = await prisma.tema.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TemaFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TemaFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TemaClient<runtime.Types.Result.GetResult<Prisma.$TemaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Tema that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TemaFindFirstArgs} args - Arguments to find a Tema
   * @example
   * // Get one Tema
   * const tema = await prisma.tema.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TemaFindFirstArgs>(args?: Prisma.SelectSubset<T, TemaFindFirstArgs<ExtArgs>>): Prisma.Prisma__TemaClient<runtime.Types.Result.GetResult<Prisma.$TemaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Tema that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TemaFindFirstOrThrowArgs} args - Arguments to find a Tema
   * @example
   * // Get one Tema
   * const tema = await prisma.tema.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TemaFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TemaFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TemaClient<runtime.Types.Result.GetResult<Prisma.$TemaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Temas that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TemaFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Temas
   * const temas = await prisma.tema.findMany()
   * 
   * // Get first 10 Temas
   * const temas = await prisma.tema.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const temaWithIdOnly = await prisma.tema.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TemaFindManyArgs>(args?: Prisma.SelectSubset<T, TemaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TemaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Tema.
   * @param {TemaCreateArgs} args - Arguments to create a Tema.
   * @example
   * // Create one Tema
   * const Tema = await prisma.tema.create({
   *   data: {
   *     // ... data to create a Tema
   *   }
   * })
   * 
   */
  create<T extends TemaCreateArgs>(args: Prisma.SelectSubset<T, TemaCreateArgs<ExtArgs>>): Prisma.Prisma__TemaClient<runtime.Types.Result.GetResult<Prisma.$TemaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Temas.
   * @param {TemaCreateManyArgs} args - Arguments to create many Temas.
   * @example
   * // Create many Temas
   * const tema = await prisma.tema.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TemaCreateManyArgs>(args?: Prisma.SelectSubset<T, TemaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Tema.
   * @param {TemaDeleteArgs} args - Arguments to delete one Tema.
   * @example
   * // Delete one Tema
   * const Tema = await prisma.tema.delete({
   *   where: {
   *     // ... filter to delete one Tema
   *   }
   * })
   * 
   */
  delete<T extends TemaDeleteArgs>(args: Prisma.SelectSubset<T, TemaDeleteArgs<ExtArgs>>): Prisma.Prisma__TemaClient<runtime.Types.Result.GetResult<Prisma.$TemaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Tema.
   * @param {TemaUpdateArgs} args - Arguments to update one Tema.
   * @example
   * // Update one Tema
   * const tema = await prisma.tema.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TemaUpdateArgs>(args: Prisma.SelectSubset<T, TemaUpdateArgs<ExtArgs>>): Prisma.Prisma__TemaClient<runtime.Types.Result.GetResult<Prisma.$TemaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Temas.
   * @param {TemaDeleteManyArgs} args - Arguments to filter Temas to delete.
   * @example
   * // Delete a few Temas
   * const { count } = await prisma.tema.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TemaDeleteManyArgs>(args?: Prisma.SelectSubset<T, TemaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Temas.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TemaUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Temas
   * const tema = await prisma.tema.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TemaUpdateManyArgs>(args: Prisma.SelectSubset<T, TemaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Tema.
   * @param {TemaUpsertArgs} args - Arguments to update or create a Tema.
   * @example
   * // Update or create a Tema
   * const tema = await prisma.tema.upsert({
   *   create: {
   *     // ... data to create a Tema
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Tema we want to update
   *   }
   * })
   */
  upsert<T extends TemaUpsertArgs>(args: Prisma.SelectSubset<T, TemaUpsertArgs<ExtArgs>>): Prisma.Prisma__TemaClient<runtime.Types.Result.GetResult<Prisma.$TemaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Temas.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TemaCountArgs} args - Arguments to filter Temas to count.
   * @example
   * // Count the number of Temas
   * const count = await prisma.tema.count({
   *   where: {
   *     // ... the filter for the Temas we want to count
   *   }
   * })
  **/
  count<T extends TemaCountArgs>(
    args?: Prisma.Subset<T, TemaCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TemaCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Tema.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TemaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TemaAggregateArgs>(args: Prisma.Subset<T, TemaAggregateArgs>): Prisma.PrismaPromise<GetTemaAggregateType<T>>

  /**
   * Group by Tema.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TemaGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TemaGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TemaGroupByArgs['orderBy'] }
      : { orderBy?: TemaGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TemaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTemaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Tema model
 */
readonly fields: TemaFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Tema.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TemaClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  creador<T extends Prisma.UsuarioDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UsuarioDefaultArgs<ExtArgs>>): Prisma.Prisma__UsuarioClient<runtime.Types.Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  carrera<T extends Prisma.CarreraDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.CarreraDefaultArgs<ExtArgs>>): Prisma.Prisma__CarreraClient<runtime.Types.Result.GetResult<Prisma.$CarreraPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  Post<T extends Prisma.Tema$PostArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Tema$PostArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Tema model
 */
export interface TemaFieldRefs {
  readonly id: Prisma.FieldRef<"Tema", 'Int'>
  readonly nombre: Prisma.FieldRef<"Tema", 'String'>
  readonly createdAt: Prisma.FieldRef<"Tema", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Tema", 'DateTime'>
  readonly titulo: Prisma.FieldRef<"Tema", 'String'>
  readonly id_creador: Prisma.FieldRef<"Tema", 'Int'>
  readonly contenido: Prisma.FieldRef<"Tema", 'String'>
  readonly id_carrera: Prisma.FieldRef<"Tema", 'Int'>
  readonly fijado: Prisma.FieldRef<"Tema", 'Boolean'>
  readonly cerrado: Prisma.FieldRef<"Tema", 'Boolean'>
}
    

// Custom InputTypes
/**
 * Tema findUnique
 */
export type TemaFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tema
   */
  select?: Prisma.TemaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tema
   */
  omit?: Prisma.TemaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TemaInclude<ExtArgs> | null
  /**
   * Filter, which Tema to fetch.
   */
  where: Prisma.TemaWhereUniqueInput
}

/**
 * Tema findUniqueOrThrow
 */
export type TemaFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tema
   */
  select?: Prisma.TemaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tema
   */
  omit?: Prisma.TemaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TemaInclude<ExtArgs> | null
  /**
   * Filter, which Tema to fetch.
   */
  where: Prisma.TemaWhereUniqueInput
}

/**
 * Tema findFirst
 */
export type TemaFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tema
   */
  select?: Prisma.TemaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tema
   */
  omit?: Prisma.TemaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TemaInclude<ExtArgs> | null
  /**
   * Filter, which Tema to fetch.
   */
  where?: Prisma.TemaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Temas to fetch.
   */
  orderBy?: Prisma.TemaOrderByWithRelationInput | Prisma.TemaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Temas.
   */
  cursor?: Prisma.TemaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Temas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Temas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Temas.
   */
  distinct?: Prisma.TemaScalarFieldEnum | Prisma.TemaScalarFieldEnum[]
}

/**
 * Tema findFirstOrThrow
 */
export type TemaFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tema
   */
  select?: Prisma.TemaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tema
   */
  omit?: Prisma.TemaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TemaInclude<ExtArgs> | null
  /**
   * Filter, which Tema to fetch.
   */
  where?: Prisma.TemaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Temas to fetch.
   */
  orderBy?: Prisma.TemaOrderByWithRelationInput | Prisma.TemaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Temas.
   */
  cursor?: Prisma.TemaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Temas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Temas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Temas.
   */
  distinct?: Prisma.TemaScalarFieldEnum | Prisma.TemaScalarFieldEnum[]
}

/**
 * Tema findMany
 */
export type TemaFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tema
   */
  select?: Prisma.TemaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tema
   */
  omit?: Prisma.TemaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TemaInclude<ExtArgs> | null
  /**
   * Filter, which Temas to fetch.
   */
  where?: Prisma.TemaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Temas to fetch.
   */
  orderBy?: Prisma.TemaOrderByWithRelationInput | Prisma.TemaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Temas.
   */
  cursor?: Prisma.TemaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Temas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Temas.
   */
  skip?: number
  distinct?: Prisma.TemaScalarFieldEnum | Prisma.TemaScalarFieldEnum[]
}

/**
 * Tema create
 */
export type TemaCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tema
   */
  select?: Prisma.TemaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tema
   */
  omit?: Prisma.TemaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TemaInclude<ExtArgs> | null
  /**
   * The data needed to create a Tema.
   */
  data: Prisma.XOR<Prisma.TemaCreateInput, Prisma.TemaUncheckedCreateInput>
}

/**
 * Tema createMany
 */
export type TemaCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Temas.
   */
  data: Prisma.TemaCreateManyInput | Prisma.TemaCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Tema update
 */
export type TemaUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tema
   */
  select?: Prisma.TemaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tema
   */
  omit?: Prisma.TemaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TemaInclude<ExtArgs> | null
  /**
   * The data needed to update a Tema.
   */
  data: Prisma.XOR<Prisma.TemaUpdateInput, Prisma.TemaUncheckedUpdateInput>
  /**
   * Choose, which Tema to update.
   */
  where: Prisma.TemaWhereUniqueInput
}

/**
 * Tema updateMany
 */
export type TemaUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Temas.
   */
  data: Prisma.XOR<Prisma.TemaUpdateManyMutationInput, Prisma.TemaUncheckedUpdateManyInput>
  /**
   * Filter which Temas to update
   */
  where?: Prisma.TemaWhereInput
  /**
   * Limit how many Temas to update.
   */
  limit?: number
}

/**
 * Tema upsert
 */
export type TemaUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tema
   */
  select?: Prisma.TemaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tema
   */
  omit?: Prisma.TemaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TemaInclude<ExtArgs> | null
  /**
   * The filter to search for the Tema to update in case it exists.
   */
  where: Prisma.TemaWhereUniqueInput
  /**
   * In case the Tema found by the `where` argument doesn't exist, create a new Tema with this data.
   */
  create: Prisma.XOR<Prisma.TemaCreateInput, Prisma.TemaUncheckedCreateInput>
  /**
   * In case the Tema was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TemaUpdateInput, Prisma.TemaUncheckedUpdateInput>
}

/**
 * Tema delete
 */
export type TemaDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tema
   */
  select?: Prisma.TemaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tema
   */
  omit?: Prisma.TemaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TemaInclude<ExtArgs> | null
  /**
   * Filter which Tema to delete.
   */
  where: Prisma.TemaWhereUniqueInput
}

/**
 * Tema deleteMany
 */
export type TemaDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Temas to delete
   */
  where?: Prisma.TemaWhereInput
  /**
   * Limit how many Temas to delete.
   */
  limit?: number
}

/**
 * Tema.Post
 */
export type Tema$PostArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Post
   */
  select?: Prisma.PostSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Post
   */
  omit?: Prisma.PostOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostInclude<ExtArgs> | null
  where?: Prisma.PostWhereInput
  orderBy?: Prisma.PostOrderByWithRelationInput | Prisma.PostOrderByWithRelationInput[]
  cursor?: Prisma.PostWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PostScalarFieldEnum | Prisma.PostScalarFieldEnum[]
}

/**
 * Tema without action
 */
export type TemaDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tema
   */
  select?: Prisma.TemaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tema
   */
  omit?: Prisma.TemaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TemaInclude<ExtArgs> | null
}
